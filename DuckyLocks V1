local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/DuckysADM/DuckysADM/refs/heads/main/DuckysADM%20Script.txt"))()

local Window = Library:New({
    Name = "DuckyLocks", -- name, Name, title, Title
})

--[[ Other Pages ]]
local Page = Window:Page({
    Name = "Main" -- name, Name, title, Title
})

local Page2 = Window:Page({
    Name = "Visuals" -- name, Name, title, Title
})

local PlayerPage = Window:Page({
    Name = "Player" -- New Page for Fly and Speed
})

local TargetPage = Window:Page({
    Name = "Target" -- New Target Page
})

--[[ Main Section ]]
local PageSection1 = Page:Section({
    Name = "Main", -- name, Name, title, Title
    Fill = true,
    Side = "Left"
})

local Button1 = PageSection1:Button({
    Name = "Camlock (Q)", -- name, Name, title, Title
    callback = function(value)
        loadstring(game:HttpGet("https://raw.githubusercontent.com/DuckysADM/Camlock/refs/heads/main/AimLock.txt"))()
    end
})

local Button2 = PageSection1:Button({
    Name = "Hitbox Expander", -- name, Name, title, Title
    callback = function(value)
        loadstring(game:HttpGet("https://raw.githubusercontent.com/DuckysADM/Hitbox-Expander/refs/heads/main/Hitbox%20Expander.txt"))()
    end
})

--[[ Player Settings Section ]]
local PlayerSection = PlayerPage:Section({
    Name = "Player Settings",
    Fill = true,
    Side = "Left"
})

-- Fly Button
local FlyButton = PlayerSection:Button({
    Name = "Fly (X)", -- name, Name, title, Title
    callback = function(value)
        loadstring(game:HttpGet("https://raw.githubusercontent.com/DuckysADM/Fly/refs/heads/main/Fly.txt"))()
    end
})

-- Speed Button
local SpeedButton = PlayerSection:Button({
    Name = "Speed (C)", -- name, Name, title, Title
    callback = function(value)
        loadstring(game:HttpGet("https://raw.githubusercontent.com/DuckysADM/Speed/refs/heads/main/Speed"))()
    end
})

-- ForceReset Button
local Button1 = PlayerSection:Button({
    Name = "ForceReset", -- name, Name, title, Title
    callback = function(value)
        loadstring(game:HttpGet("https://raw.githubusercontent.com/DuckysADM/Force-Reset/refs/heads/main/Force%20Reset"))()
    end
})


--[[ Teleports Page ]]
local TeleportsPage = Window:Page({
    Name = "Teleports"
})

local TeleportsSectionLeft = TeleportsPage:Section({
    Name = "Teleports",
    Fill = true,
    Side = "Left"
})

local TeleportsSectionRight = TeleportsPage:Section({
    Name = "Teleports",
    Fill = true,
    Side = "Right"
})

-- Local Player Reference
local LocalPlayer = game.Players.LocalPlayer

-- Function to Teleport to a Location
local function teleportToLocation(cframe)
    if LocalPlayer.Character then
        local rootPart = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        if rootPart then
            rootPart.CFrame = cframe
        else
            warn("HumanoidRootPart not found!")
        end
    else
        warn("Character not found!")
    end
end

-- List of Teleports
local teleportsLeft = loadstring(game:HttpGet("https://raw.githubusercontent.com/DuckysADM/LeftTPS/main/TP"))()
local teleportsRight = loadstring(game:HttpGet("https://raw.githubusercontent.com/DuckysADM/RightTP/main/TP"))()

-- Add teleport buttons
for _, teleport in pairs(teleportsLeft) do
    TeleportsSectionLeft:Button({
        Name = teleport.Name,
        callback = function()
            teleportToLocation(teleport.CFrame)
        end
    })
end

for _, teleport in pairs(teleportsRight) do
    TeleportsSectionRight:Button({
        Name = teleport.Name,
        callback = function()
            teleportToLocation(teleport.CFrame)
        end
    })
end

--[[ Target Page - Teleport to Player ]]
local TargetSection = TargetPage:Section({
    Name = "Teleport to Player", -- name, Name, title, Title
    Fill = true,
    Side = "Left"
})

-- Function to teleport to a selected player
local function teleportToPlayer(playerDisplayName)
    local player = nil
    for _, p in ipairs(game.Players:GetPlayers()) do
        if p.DisplayName == playerDisplayName then
            player = p
            break
        end
    end

    if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        local rootPart = player.Character.HumanoidRootPart
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = rootPart.CFrame
    else
        warn("Player not found or character is not loaded.")
    end
end

-- Get player names to display in the dropdown
local PlayerNames = {}
for _, player in ipairs(game.Players:GetPlayers()) do
    table.insert(PlayerNames, player.DisplayName)
end

-- Create a dropdown for selecting a player to teleport to
local PlayerDropdown = TargetSection:Dropdown({
    Name = "Select Player", -- Dropdown title
    Options = PlayerNames, -- List of player names
    callback = function(selectedPlayer)
        teleportToPlayer(selectedPlayer) -- teleport to selected player
    end
})

-- Update the player list when a player joins or leaves the game
game.Players.PlayerAdded:Connect(function(player)
    table.insert(PlayerNames, player.Name)
    PlayerDropdown:SetOptions(PlayerNames) -- Update dropdown options
end)

game.Players.PlayerRemoving:Connect(function(player)
    for i, name in ipairs(PlayerNames) do
        if name == player.Name then
            table.remove(PlayerNames, i)
            break
        end
    end
    PlayerDropdown:SetOptions(PlayerNames) -- Update dropdown options
end)

--[[ Visuals Section ]]
local vis = Page2:Section({
    Name = "Visuals"
})

local plrs = game:GetService("Players")

local ESPBoxes = {}
local NameLabels = {}
local updating = false
local updatingNames = false

local function updateESP(state)
    if state then
        updating = true
        for _, player in pairs(plrs:GetPlayers()) do
            if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                local box = ESPBoxes[player] or Drawing.new("Square")
                box.Color = Color3.fromRGB(255, 255, 255)
                box.Thickness = 0.7
                box.Transparency = 1
                box.Filled = false
                ESPBoxes[player] = box
            end
        end

        -- Updates the ESP boxes in real-time
        task.spawn(function()
            while updating do
                for player, box in pairs(ESPBoxes) do
                    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                        local rootPart = player.Character.HumanoidRootPart
                        local screenPos, onScreen = game.Workspace.CurrentCamera:WorldToViewportPoint(rootPart.Position)

                        if onScreen then
                            box.Size = Vector2.new(2000 / screenPos.Z, 3000 / screenPos.Z)
                            box.Position = Vector2.new(screenPos.X - box.Size.X / 2, screenPos.Y - box.Size.Y / 2)
                            box.Visible = true
                        else
                            box.Visible = false
                        end
                    else
                        box.Visible = false
                    end
                end
                task.wait(1 / 148)
            end
        end)
    else
        updating = false
        for _, box in pairs(ESPBoxes) do
            box:Remove()
        end
        ESPBoxes = {}
    end
end

local function updateNames(state)
    if state then
        updatingNames = true
        for _, player in pairs(plrs:GetPlayers()) do
            if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                local nameLabel = NameLabels[player] or Drawing.new("Text")
                nameLabel.Text = player.Name
                nameLabel.Size = 15
                nameLabel.Color = Color3.fromRGB(255, 255, 255)
                nameLabel.Center = true
                nameLabel.Outline = true
                NameLabels[player] = nameLabel
            end
        end

        -- Updates the name labels in real-time
        task.spawn(function()
            while updatingNames do
                for player, nameLabel in pairs(NameLabels) do
                    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                        local rootPart = player.Character.HumanoidRootPart
                        local headPos, onScreen = game.Workspace.CurrentCamera:WorldToViewportPoint(rootPart.Position + Vector3.new(0, 3, 0))

                        if onScreen then
                            nameLabel.Position = Vector2.new(headPos.X, headPos.Y)
                            nameLabel.Visible = true
                        else
                            nameLabel.Visible = false
                        end
                    else
                        nameLabel.Visible = false
                    end
                end
                task.wait(1 / 148)
            end
        end)
    else
        updatingNames = false
        for _, nameLabel in pairs(NameLabels) do
            nameLabel:Remove()
        end
        NameLabels = {}
    end
end

vis:Toggle({
    Name = "ESP Boxes",
    Default = false,
    callback = function(value)
        updateESP(value)
    end
})

vis:Toggle({
    Name = "Name Tags",
    Default = false,
    callback = function(value)
        updateNames(value)
    end
})

Window:Initialize() -- Initialize the UI
